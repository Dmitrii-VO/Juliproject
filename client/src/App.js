import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './index.css';

const materialTypeNames = {
  'lesson-plan': '–ü–ª–∞–Ω —É—Ä–æ–∫–∞',
  'presentation': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
  'worksheet': '–†–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ã',
  'test': '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
  'homework': '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ',
  'summary': '–ö–æ–Ω—Å–ø–µ–∫—Ç'
};

function App() {
  const [subjects, setSubjects] = useState([]);
  const [classes, setClasses] = useState([]);
  const [formData, setFormData] = useState({
    subject: '',
    className: '',
    topic: '',
    materialTypes: []
  });
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [exportLoading, setExportLoading] = useState(false);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const [subjectsRes, classesRes] = await Promise.all([
        axios.get('/api/subjects'),
        axios.get('/api/classes')
      ]);
      setSubjects(subjectsRes.data);
      setClasses(classesRes.data);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleMaterialTypeChange = (materialType, checked) => {
    setFormData(prev => ({
      ...prev,
      materialTypes: checked 
        ? [...prev.materialTypes, materialType]
        : prev.materialTypes.filter(type => type !== materialType)
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.subject || !formData.className || !formData.topic || formData.materialTypes.length === 0) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
      return;
    }

    setLoading(true);
    setError('');
    setResults(null);

    try {
      const response = await axios.post('/api/generate-materials', formData);
      setResults(response.data.materials);
    } catch (error) {
      setError(error.response?.data?.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const handleExport = async (format) => {
    if (!results || !formData.subject) {
      setError('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã');
      return;
    }

    setExportLoading(true);
    setError('');

    try {
      const exportData = {
        materials: results,
        metadata: {
          subject: formData.subject,
          className: formData.className,
          topic: formData.topic
        }
      };

      let endpoint;
      switch (format) {
        case 'docx':
          endpoint = '/api/export/docx';
          break;
        case 'pdf':
          endpoint = '/api/export/pdf';
          break;
        case 'zip':
          endpoint = '/api/export/zip';
          exportData.formats = ['docx', 'pdf'];
          break;
        default:
          throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç');
      }

      const response = await axios.post(endpoint, exportData, {
        responseType: 'blob'
      });

      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      
      const contentDisposition = response.headers['content-disposition'];
      let filename = `materials.${format}`;
      if (contentDisposition) {
        const matches = contentDisposition.match(/filename[^;=\n]*=((['"]).+\2|[^;\n]*)/);
        if (matches != null && matches[1]) {
          filename = matches[1].replace(/['"]/g, '');
        }
      }
      
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      setError(error.response?.data?.error || `–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç ${format.toUpperCase()}`);
    } finally {
      setExportLoading(false);
    }
  };

  const materialTypes = [
    { id: 'lesson-plan', name: '–ü–ª–∞–Ω —É—Ä–æ–∫–∞', description: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞' },
    { id: 'presentation', name: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', description: '–°–ª–∞–π–¥—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞' },
    { id: 'worksheet', name: '–†–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ã', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤' },
    { id: 'test', name: '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', description: '–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π' },
    { id: 'homework', name: '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', description: '–ó–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã' },
    { id: 'summary', name: '–ö–æ–Ω—Å–ø–µ–∫—Ç', description: '–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–Ω—è—Ç–∏–π' }
  ];

  return (
    <div className="container">
      <div className="header">
        <h1>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</h1>
        <p>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò</p>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="subject">–ü—Ä–µ–¥–º–µ—Ç:</label>
          <select
            id="subject"
            name="subject"
            value={formData.subject}
            onChange={handleInputChange}
            className="form-control"
            required
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</option>
            {subjects.map(subject => (
              <option key={subject.id} value={subject.id}>
                {subject.name}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label htmlFor="className">–ö–ª–∞—Å—Å:</label>
          <select
            id="className"
            name="className"
            value={formData.className}
            onChange={handleInputChange}
            className="form-control"
            required
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å</option>
            {classes.map(cls => (
              <option key={cls.id} value={cls.id}>
                {cls.name}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label htmlFor="topic">–¢–µ–º–∞ —É—Ä–æ–∫–∞:</label>
          <input
            type="text"
            id="topic"
            name="topic"
            value={formData.topic}
            onChange={handleInputChange}
            className="form-control"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —É—Ä–æ–∫–∞"
            required
          />
        </div>

        <div className="form-group">
          <label>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</label>
          <div className="material-types">
            {materialTypes.map(type => (
              <div key={type.id} className="material-type">
                <input
                  type="checkbox"
                  id={type.id}
                  checked={formData.materialTypes.includes(type.id)}
                  onChange={(e) => handleMaterialTypeChange(type.id, e.target.checked)}
                />
                <div className="material-info">
                  <h4>{type.name}</h4>
                  <p>{type.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        <button type="submit" className="btn" disabled={loading}>
          {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã'}
        </button>
      </form>

      {error && (
        <div className="error">
          {error}
        </div>
      )}

      {loading && (
        <div className="loading">
          <div className="spinner"></div>
          <p>–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...</p>
        </div>
      )}

      {results && (
        <div className="results">
          <div className="results-header">
            <h2>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</h2>
            <div className="export-buttons">
              <h3>–°–∫–∞—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</h3>
              <div className="export-options">
                <button 
                  className="btn export-btn" 
                  onClick={() => handleExport('docx')}
                  disabled={exportLoading}
                  title="–°–∫–∞—á–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Microsoft Word (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –ì–û–°–¢)"
                >
                  üìÑ DOCX
                </button>
                <button 
                  className="btn export-btn pdf-warning" 
                  onClick={() => handleExport('pdf')}
                  disabled={exportLoading}
                  title="‚ö†Ô∏è PDF —ç–∫—Å–ø–æ—Ä—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DOCX —Ñ–æ—Ä–º–∞—Ç"
                >
                  üìë PDF ‚ö†Ô∏è
                </button>
                <button 
                  className="btn export-btn" 
                  onClick={() => handleExport('zip')}
                  disabled={exportLoading}
                  title="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ (DOCX + PDF)"
                >
                  üì¶ ZIP
                </button>
              </div>
              {exportLoading && (
                <p className="export-loading">‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...</p>
              )}
            </div>
          </div>
          
          <div className="gost-info">
            <h4>üìã –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ì–û–°–¢:</h4>
            <ul>
              <li><strong>–®—Ä–∏—Ñ—Ç:</strong> Times New Roman, 14pt</li>
              <li><strong>–ü–æ–ª—è:</strong> –≤–µ—Ä—Ö/–Ω–∏–∑ - 2—Å–º, –ª–µ–≤–æ - 3—Å–º, –ø—Ä–∞–≤–æ - 1.5—Å–º</li>
              <li><strong>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</strong> 1.5 –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫</li>
              <li><strong>–ö—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:</strong> 1.25—Å–º</li>
            </ul>
            <div className="format-info">
              <p><strong>üìÑ DOCX —Ñ–æ—Ä–º–∞—Ç:</strong> –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</p>
              <p><strong>‚ö†Ô∏è PDF —Ñ–æ—Ä–º–∞—Ç:</strong> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã. –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º</p>
            </div>
          </div>

          {Object.entries(results).map(([type, material]) => (
            <div key={type} className="result-item">
              <h3>{materialTypeNames[type] || type}</h3>
              {material.error ? (
                <div className="error">{material.error}</div>
              ) : (
                <div className="result-content">
                  {material.content}
                  {material.mock && (
                    <p style={{color: '#666', fontStyle: 'italic', marginTop: '15px'}}>
                      üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ AI API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env
                    </p>
                  )}
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default App;
